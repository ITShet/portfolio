
M 100 300 C 300 150 400 400 600 300 C 650 250 650 200 700 250 C 750 300 750 350 700 400 C 450 550 300 250 100 400 Q 50 450 0 350 C 50 300 50 350 100 300
























































anime.set('.stagger-visualizer .cursor', {
    translateX: anime.stagger([-cell], { grid: grid, from: index, axis: 'x' }),
    translateY: anime.stagger([-cell], { grid: grid, from: index, axis: 'y' }),
    translateZ: 0,
    scale: 1.5,
});

function play() {
    paused = false;
    if (animation) animation.pause();

    animation = anime.timeline({
        easing: 'easeInOutQuad',
        complete: play,
    }).add({
        targets: '.stagger-visualizer .cursor',
        keyframes: [
            { scale: .75, duration: 120 },
            { scale: 2.5, duration: 220 },
            { scale: 1.5, duration: 450 },
        ],
        duration: 300,
    }).add({
        targets: '.stagger-visualizer .dot',
        keyframes: [
            {
                translateX: anime.stagger(['-2px'], { grid: grid, from: index, axis: 'x' }),
                translateY: anime.stagger(['-2px'], { grid: grid, from: index, axis: 'y' }),
                duration: 100,
            },
            {
                translateX: anime.stagger(['4px'], { grid: grid, from: index, axis: 'x' }),
                translateY: anime.stagger(['4px'], { grid: grid, from: index, axis: 'y' }),
                scale: anime.stagger([2.6, 1], { grid: grid, from: index }),
                duration: 225,
            },
            {
                translateX: 0,
                translateY: 0,
                scale: 1,
                duration: 1200,
            },
        ],
        delay: anime.stagger(80, { grid: grid, from: index }),
    }, 30).add({
        targets: '.stagger-visualizer .cursor',
        translateX: { value: anime.stagger([-cell], { grid: grid, from: index, axis: 'x' }) },
        translateY: { value: anime.stagger([-cell], { grid: grid, from: index, axis: 'y' }) },
        scale: 1.5,
        easing: 'cubicBezier(.075, .2, .165, 1)',
    }, '-=800');
}

play();





CSS: -
    .animation - wrapper {
    width: 80 %;
    padding - bottom: 40 %;
}
      
      .stagger - visualizer {
    position: absolute;
    width: 1100px;
    height: 550px;
    transform - origin: left top;
}
      
      .stagger - visualizer.dots - wrapper {
    transform: translateZ(0);
    position: absolute;
    top: 0;
    left: 0;
    width: 100 %;
    height: 100 %;
    display: flex;
    flex - wrap: wrap;
    justify - content: center;
    align - items: center;
}
      
      .stagger - visualizer.dot {
    position: relative;
    z - index: 1;
    width: 23px;
    height: 23px;
    margin: 16px;
    background - color: currentColor;
    border - radius: 50 %;
}

@media(min - width: 740px) {
        .stagger - visualizer.dot {
        background - color: transparent;
        background - image: linear - gradient(180deg, #FFFFFF 8 %, #D3CDC6 100 %);
    }
}
